ser(airquality)
?str
str(airquality)
head(airquality)
?attach
xyplot(Ozone~Wind, data=airquality)
xyplot(Ozone~Wind, data=airquality, col="red", pch=8, main = "Big Apple Data")
xyplot(Ozone ~ Wind, data = airquality, pch=8, col="red", main="Big Apple Data")
xyplot(Ozone~Wind | as.factor(Month), data=airquality, layout=c(5,1))
xyplot(Ozone~Wind | Month, data=airquality, layout=c(5,1))
p <- xyplot(Ozone~Wind,data=airquality)
p
names(p)
mynames
myfull
mynames[myfull]
p["formula"]
p[["formula"]]
p[["x.limits"]]
x
table(f)
xyplot(y~x|f, layout=c(2,1))
v1
v2
myedit("plot1.R")
pathtofile("Plot1.R")
source(pathtofile("plot1.R"),local=TRUE)
myedit("plot2.R")
source(pathtofile("plot2.R"),local=TRUE)
str(diamonds)
table(diamonds$color)
table(diamonds$color, diamonds$cut)
myedit("myLabels.R")
pathtofile("myLabels.R")
pathtofile("myLabels.R", local=TRUE)
source(pathtofile("myLabels.R"), local=TRUE)
xyplot(price~carat| color*cut, data=diamonds, strip=F, pch=20, xlab=myxlab, ylab=myylab,main=mymain)
xyplot(price~carat| color*cut, data=diamonds, strip=FALSE, pch=20, xlab=myxlab, ylab=myylab,main=mymain)
xyplot(price~carat| color*cut, data=diamonds, pch=20, xlab=myxlab, ylab=myylab,main=mymain)
sample(colors(), 10)
pal <- colorRamp(c("red", "blue"))
pal(0)
pal(1)
seq(0,1, l=6)
pal(seq(0,1, l=6))
p1 <- colorRampPallet <- c("red", "blue")
p1 <- colorRampPallete <- c("red", "blue")
p1 <- colorRampPallete(c("red", "blue"))
p1 <- colorRampPalete(c("red", "blue"))
p1 <- colorRampPalette(c("red", "blue"))
p1(2)
p1
pq(6)
p1(6)
0xcc
p2<-colorRampPalette(c("red","yellow"))
p1(2)
p2(2)
p2(100)
p2(1)
p2(10)
0xFF
showMe(p1(20))
showMe(p2(200))
showMe(p2(20))
showMe(p2(2000))
showMe(p2(20000000))
showMe(p2(20000))
showMe(p2(2))
p1
?rgb
p3 <- colorRampPalette(c("blue","green"), alpha=0.5)
p3(5)
plot(x,y,pch=19,col=rgb(0,.5,.5))
plot(x,y,pch=19,col=rgb(0,.5,.5,.3))
cols <- brewer.pal(3,"BuGn")
showMe()
showMe(cols)
pal <- colorRampPalette(cols)
showMe(pal(20)
)
image(volcano, col=pal(20))
image(volcano, col=p1(20))
str(mpg)
qplot(displ,hwy,mpg)
qplot(displ,hwy,data=mpg)
qplot(displ,hwy,data=mpg, color=drv)
qplot(displ,hwy,data=mpg, color=drv,geom=c("points","smooth"))
qplot(displ,hwy,data=mpg, color=drv,geom=c("point","smooth"))
qplot(y=hwy, data=mpg, col=drv)
qplot(y=hwy, data=mpg, color=drv)
myhigh
qplot(drv,hwy,data=mpg,geom="boxplot")
qplot(drv,hwy,data=mpg,geom="boxplot", color=manufacturer)
qpot(hwy,data=mpg,fill=drv)
qplot(hwy,data=mpg,fill=drv)
qplot(disp,hwy,data=mpg,facets=.~drv)
qplot(displ,hwy,data=mpg,facets=.~drv)
play()
max(mpg$hwy)
max.col(mpg$hwy)
test <- subset(mpg, mpg$hwy = max(mpg$hwy))
test <- subset(mpg, mpg$hwy == max(mpg$hwy))
test
nxt()
qplot(hwy,data=mpg,facts=drv~.,binwidth=2)
qplot(hwy,data=mpg,facets=drv~.,binwidth=2)
qplot(displ,hwy,data=mpg,geom=c("point","smooth"),facets=.~drv)
g <- ggplot(mpg, aes(displ,hwy))
summary(g)
g+geom_point()
g+geom_point()+geom_smooth()
g+geom_point()+geom_smooth(method="lm")
g+geom_point()+geom_smooth(method="lm")+facet_grid(.~drv)
g+geom_point()+geom_smooth(method="lm")+facet_grid(.~drv)+ggtitle("Swirl Rules!")
g+geom_point(color="pink",size=4,alpha=1/2)
play()
g+geom_point(color="pink",size=4,alpha=1)
g+geom_point(color="pink",size=4,alpha=.1)
nxt()
g + geom_point(size=4,alpha=1/2,aes(color=drv))
g+geom_point(aes(color=drv))+labs(title="Swirl Rules!", x="Displacement", y="Hwy Mileage")
g+geom_point(aes(color=drv))+labs(title="Swirl Rules!") labs(x="Displacement", y="Hwy Mileage")
g+geom_point(aes(color=drv))+labs(title="Swirl Rules!") +labs(x="Displacement", y="Hwy Mileage")
g+geom_point(aes(color=drv), size=2,alpha=1/2)+geom_smooth(size=4,linetype=3,method="lm", se=FALSE)
play()
g+geom_point(aes(color=drv), size=2,alpha=1/2)+geom_smooth(size=4,linetype=drv,method="lm", se=FALSE)
g+geom_point(aes(color=drv), size=2,alpha=1/2)+geom_smooth(size=4,aes(linetype=drv),method="lm", se=FALSE)
g+geom_point(aes(color=drv), size=2,alpha=1/2)+geom_smooth(size=4,linetype=3, aes(color=drv),method="lm", se=FALSE)
g+geom_point(aes(color=drv), size=2,alpha=1/2)+geom_smooth(size=4,linetype=3, aes(color=drv), se=FALSE)
g+geom_point(aes(color=drv), size=2,alpha=1/2)+geom_smooth(size=4,linetype=1, aes(color=drv), se=T)
g+geom_point(aes(color=drv), size=2,alpha=1/2)+geom_smooth(size=4,linetype=1, aes(color=drv), se=T, alpha=1/2)
g+geom_point(aes(color=drv), size=2,alpha=1/2)+geom_smooth(size=4,linetype=1, aes(color=drv), se=T, alpha=.1)
g+geom_point(aes(color=drv), size=2,alpha=1/2)+geom_smooth(size=1,linetype=1, aes(color=drv), se=T, alpha=.1)
?geom_smooth
g+geom_point(aes(color=drv), size=2,alpha=1/2)+geom_smooth(size=1,linetype=1, aes(color=drv), se=T, alpha=.1, span=1)
g+geom_point(aes(color=drv), size=2,alpha=1/2)+geom_smooth(size=1,linetype=1, aes(color=drv), se=T, alpha=.1, span=.1)
g+geom_point(aes(color=drv), size=2,alpha=1/2)+geom_smooth(size=1,linetype=1, aes(color=drv), se=T, alpha=.1, span=10)
?geom_smooth
geom_smooth$span
geom_smooth
g+geom_point(aes(color=drv), size=2,alpha=1/2)+geom_smooth(size=1,linetype=1, aes(color=drv), se=T, alpha=.1, span=10)
g+geom_point(aes(color=drv), size=2,alpha=1/2)+geom_smooth(size=1,linetype=1, aes(color=drv), se=T, alpha=.1, span=1)
g+geom_point(aes(color=drv), size=2,alpha=1/2)+geom_smooth(size=1,linetype=1, aes(color=drv), se=T, alpha=.1, span=1/2)
g+geom_point(aes(color=drv), size=2,alpha=1/2)+geom_smooth(size=1,linetype=1, aes(color=drv), se=T, alpha=.1, span=1000)
g+geom_point(aes(color=drv), size=2,alpha=1/2)+geom_smooth(size=1,linetype=1, aes(color=drv), se=T, alpha=.1, span=.7)
g+geom_point(aes(color=drv), size=2,alpha=1/2)+geom_smooth(size=1,linetype=1, aes(color=drv), se=T, alpha=.1, span=1)
g+geom_point(aes(color=drv), size=2,alpha=1/2)+geom_smooth(size=1,linetype=1, aes(color=drv), se=T, alpha=.1, span=10)
g+geom_point(aes(color=drv), size=2,alpha=1/2)+geom_smooth(size=1,linetype=1, aes(color=drv), se=T, alpha=.1, span=1)
nxt()
g+geom_point(color=drv)+theme_bw(base_family = "Times")
g+geom_point(color=drv)+theme_bw(base_family = "Times")
g+geom_point(color="drv)+theme_bw(base_family = "Times")
g+geom_point(color=1)+theme_bw(base_family = "Times")
g+geom_point(aes(color=drv))+theme_bw(base_family = "Times")
plot(myx,myy,type="l",ylim=c(-3,3))
g <- ggplot(testdat, aes(x=myx,y=myy))
g+ geom_line()
g+ geom_line()+ylim(-3,3)
g+ geom_line()+coord_cartesian(ylim(-3,3))
c
g+ geom_line()+coord_cartesian(ylim=c(-3,3))
g <- ggplot(mpg,aes(displ,hwy, color=factor(year)))
ply()
play()
g <- ggplot(mpg,aes(displ,hwy, col=factor(year)))
g+geom_point()
nxt
nxt()
g+geom_point()
g <- ggplot(mpg,aes(displ,hwy, color=factor(year)))
g+geom_point()
g+geom_point()+facet_grid(drv~cyl,margins=TRUE)
g+geom_point()+facet_grid(drv~cyl,margins=TRUE)+geom_smooth(method="lm",se=FALSE,size=2,color="black")
g+geom_point()+facet_grid(drv~cyl,margins=TRUE)+geom_smooth(method="lm",se=FALSE,size=2,color="black")+labs(x="Displacement",y="Highway Mileage", title="Swirl Rules!")
srt(diamonds)
str(diamonds)
qplot(price,data=diamonds)
range(diamonds$price)
qplot(price,data=diamonds,binwidth=18497/30)
brk
counts
qplot(price, data=diamonds,binwidth=18497/30,fill=cut)
qplot(price,data=diamonds,geom="density")
qplot(price,data=diamonds,geom="density",color=cut)
qplot(carat,price,data=diamonds)
qplot(carat,price,data=diamonds,shape=cut)
qplot(carat,price,data=diamonds,color=cut)
qplot(carat,price,data=diamonds,color=cut,geom_smooth(method="lm"))
qplot(carat,price,data=diamonds, color=cut) + geom_smooth(method="lm")
qplot(carat,price,data=diamonds, color=cut, facets=.~cut) + geom_smooth(method="lm")
g <-ggplot(diamonds, aes(depth,price))
summary(g)
g+geom_point(alpha=1/3)
cutpoints <- quantile(diamonds$carat, seq(0,1,length=4), na.rm=TRUE)
cutpoints
diamonds$car2 <- cut(diamonds$carat, cutpoints)
g <- ggplot(diamonds, aes(depth,price))
g+ geom_point(alpha=1/3)+facet_grid(cut~car2)
diamonds[myd,]
cutpoints
g+ geom_point(alpha=1/3)+facet_grid(cut~car2)+geom_smooth(method="lm",size=3, color="pink")
ggplot(diamonds, aes(carat,price))
ggplot(diamonds, aes(carat,price))+geom_boxplot()+facet_grid(.~cut)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
?axis
?text
lines()
?lines
?lpoints
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
p
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
qplot(votes, rating, data = movies) + geom_smooth()
qplot(depth, cut, data = diamonds) + geom_smooth()
qplot(depth,price, data = diamonds) + geom_smooth()
printmessage <- function(x){}
printmessage <- function(x){
if(x>0)
print("X gre")
else
print("x is less than")
}
printmessage(1)
swirl()
library(swirl)
swirl()
head(flags)
dim(flags)
viewinfo(flags)
viewinfo()
class(flags)
as.list(flags)
cls_list <- lapply(flags, class)
cls_list
str(flags)
class(cls_list)
as.character(cls_list)
cls_list <- sapply(flags, class)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[,11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
class(sapply(flag_colors, sum))
sapply(flag_colors,mean)
flag_shapes <- flags[,19:23]
lappy(flag_shapes, range())
lapply(flag_shapes, range())
lapply(flag_shapes, range)
shape_mat <-sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
unique_vals <- lapply(flags, unique)
unique_vals
lapply(unique_vals, length)
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
play()
array(1:1000, 10*10*10)
dim(array(1:1000, 10*10*10))
dim(array(1:1000, c(10,10,10)))
array(1:1000, c(10,10,10))
nxt()
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
data("iris")
data
?iris
head(iris)
tapply(iris$Sepal.Length, iris$Species, mean)
round(mean(iris[which(iris$Species == "virginica"),]$Sepal.Length))
round(mean(iris[which(iris$Species == "virginica")]$Sepal.Length))
sapply(iris, mean)
colMeans(iris)
apply(iris, 2, mean)
?apply
apply(iris[, 1:4], 2, mean)
data("mtcars")
tapply(mtcars$mpg, mtcars$cyl, mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
with(mtcars, tapply(mpg, cyl, mean))
sapply(mtcars, cyl, mean)
apply(mtcars, 2, mean)
lapply(mtcars, mean)
split(mtcars, mtcars$cyl)
mean(mtcars$mpg, mtcars$cyl)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
tapply(mtcars$hp, mtcars$cyl, mean)
data <- tapply(mtcars$hp, mtcars$cyl, mean)
data[1]
data[2]
data[3]-data[1]
data$1
debug(ls)
ls(f)
exit
0
0
0
setwd(readline())
getwd
getwd()
file.access("cachematrix.R")
load("cachematrix.R")
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
makeVector()
data <- c(4,5,6,7,8,9)
makevector(data)
makeVector(data)
args(makeVector)
class(data)
makeVector(data)
datasets
airmiles
library(datasets)
makeVector(airquality)
x
makeVector()
makevector(x)
makeVector(x)
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cachemean(data)
cachemean(airquality)
cachemean()
x = rbind(c(1, -1/4), c(-1/4, 1))
x
x <- rbind(c(1, -1/4), c(-1/4, 1))
x
data = c(1,2,3,3)
data
x
x <- data
x
x
m <- makeVector(x)
m
m$get()
m$getmean
m$list
cachemean(m)
cachemean(m)
cachemean(m)
cachemean(m)
cachemean(m)
cachemean(m)
cachemean(m)
m
m$get()
m$set()
rm(x)
makeVector(data)
data$getmean
vector <-makeVector(data)
rm(m)
vector$getmean()
vector$m
vector$set()
x
vector$setmean
vector$list
vector
vector <-makeVector(data)
vector
cachemean(vector)
cachemean(vector)
vector$x
m
makeVector$m
vector$m
makeVector
vector
vector$getmean$m
vector$getmean
makeVector(data)
vector2<-makeVector(data)
cachemean(vector2)
cachemean(vector2)
cachemean(vector2)
cachemean(vector2)
rm(vector)
rm(vector2)
vector2<-makeVector(data)
cachemean(vector2)
cachemean(vector2)
vector2$m
vector$getmean
vector2$getmean
cachemean
cachemean$m
cachemean$data
cachemean$data
cachemean(vector2, vector2)
cachemean(vector2, vector2)
vector2$get()
vector2$getmean
vector2$getmean()
vector2$set()
vector2$set(data)
vector2$getmean()
vector2$list
vector2$test
vector2
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
#list(set = set, get = get,
#    setmean = setmean,
#   getmean = getmean)
}
makeCacheMatrix(data)
vector2 < - makeCacheMatrix(data)
vector2 <- makeCacheMatrix(data)
vector2
?array
data <- array(1:20, c(4,5))
data
matrix <- makeCacheMatrix(data)
cacheSolve(matrix)
matrix
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinversion <- function(inversion) m <<- inversion
getinversion <- function() m
list(set = set, get = get,
setinversion = setinversion,
getinversion = getinversion)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
m <- x$getinversion()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinversion(m)
m
}
matrix <- makeCacheMatrix(data)
matrix
cacheSolve(matrix)
data <- array(1:25, c(5,5))
matrix <- makeCacheMatrix(data)
cacheSolve(matrix)
solve(data)
data <- array (c(4,7,2,6), dim=c(2,2))
data
data <- array (c(4,2,7,6), dim=c(2,2))
data
solve(data)
matrix <- makeCacheMatrix(data)
cacheSolve(matrix)
cacheSolve(matrix)
